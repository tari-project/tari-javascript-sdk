name: Build Native Modules

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'native/**'
      - 'scripts/build-native.sh'
      - '.github/workflows/build-native.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'native/**'
      - 'scripts/build-native.sh'
      - '.github/workflows/build-native.yml'

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: x86_64-apple-darwin
            os: macos-latest
            name: macOS x64
          - target: aarch64-apple-darwin
            os: macos-latest
            name: macOS ARM64
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            name: Windows x64
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            name: Linux x64
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
            name: Linux ARM64

    runs-on: ${{ matrix.os }}
    name: Build ${{ matrix.name }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '21.6.0'
          cache: 'npm'

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Cache Cargo dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            native/target
          key: ${{ runner.os }}-cargo-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-${{ matrix.target }}-
            ${{ runner.os }}-cargo-

      - name: Install cross-compilation tools (Linux ARM64)
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu

      - name: Install dependencies
        run: npm ci

      - name: Build native module
        run: |
          cd native
          cargo build --target ${{ matrix.target }} --release
        env:
          CC_aarch64_unknown_linux_gnu: aarch64-linux-gnu-gcc
          CXX_aarch64_unknown_linux_gnu: aarch64-linux-gnu-g++

      - name: Test native module (current platform only)
        if: matrix.target == 'x86_64-apple-darwin' || matrix.target == 'x86_64-pc-windows-msvc' || matrix.target == 'x86_64-unknown-linux-gnu'
        run: |
          cd native
          cargo test --target ${{ matrix.target }} --release

      - name: Package artifacts
        run: |
          mkdir -p dist/native/${{ matrix.target }}
          
          # Copy the built library
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            cp native/target/${{ matrix.target }}/release/tari_secure_storage.dll dist/native/${{ matrix.target }}/
          elif [ "${{ matrix.os }}" = "macos-latest" ]; then
            cp native/target/${{ matrix.target }}/release/libtari_secure_storage.dylib dist/native/${{ matrix.target }}/
          else
            cp native/target/${{ matrix.target }}/release/libtari_secure_storage.so dist/native/${{ matrix.target }}/
          fi
        shell: bash

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: native-${{ matrix.target }}
          path: dist/native/${{ matrix.target }}/
          retention-days: 30

  test-integration:
    needs: build
    runs-on: ubuntu-latest
    name: Integration Tests

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '21.6.0'
          cache: 'npm'

      - name: Download all artifacts
        uses: actions/download-artifact@v3
        with:
          path: dist/native/

      - name: Install dependencies
        run: npm ci

      - name: Run TypeScript tests
        run: npm run test

      - name: Check TypeScript compilation
        run: npm run typecheck

      - name: Run linting
        run: npm run lint

  release-binaries:
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: [build, test-integration]
    runs-on: ubuntu-latest
    name: Release Binaries

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v3
        with:
          path: dist/native/

      - name: Create release archive
        run: |
          cd dist/native
          for target in */; do
            tar -czf "../native-${target%/}.tar.gz" -C "$target" .
          done
          cd ../..

      - name: Upload to release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: dist/*.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Store artifacts for manual download
        uses: actions/upload-artifact@v4
        with:
          name: all-native-binaries
          path: dist/*.tar.gz
          retention-days: 90
