name: Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run tests daily at 2 AM UTC
    - cron: '0 2 * * *'

env:
  NODE_VERSION: '21.6.0'
  RUST_VERSION: '1.80'

jobs:
  # Unit tests with mocked FFI
  unit-tests:
    name: Unit Tests
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        node-version: [21.6.0, 22]
      fail-fast: false
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build packages
        run: npm run build
        
      - name: Run unit tests
        run: npm run test:unit
        env:
          CI: true
          
      - name: Upload unit test coverage
        uses: codecov/codecov-action@v3
        with:
          files: ./coverage/lcov.info
          flags: unit-tests
          name: unit-tests-${{ matrix.os }}-node${{ matrix.node-version }}

  # Integration tests with real FFI (Linux only for now)
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ env.RUST_VERSION }}
          override: true
          components: rustfmt, clippy
          
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential libssl-dev pkg-config
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build native modules
        run: npm run build:native
        
      - name: Build packages
        run: npm run build
        
      - name: Run integration tests
        run: npm run test:integration
        env:
          CI: true
          JEST_INTEGRATION_MODE: 'true'
          
      - name: Upload integration test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: integration-test-results
          path: |
            test-results/
            logs/

  # E2E tests (only on main branch or when explicitly triggered)
  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: integration-tests
    if: github.ref == 'refs/heads/main' || github.event_name == 'schedule' || contains(github.event.pull_request.labels.*.name, 'run-e2e')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ env.RUST_VERSION }}
          override: true
          
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential libssl-dev pkg-config
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build native modules
        run: npm run build:native
        
      - name: Build packages
        run: npm run build
        
      - name: Check network availability
        run: |
          if ping -c 1 seed1.tari.com &> /dev/null; then
            echo "NETWORK_AVAILABLE=true" >> $GITHUB_ENV
          else
            echo "NETWORK_AVAILABLE=false" >> $GITHUB_ENV
          fi
          
      - name: Run E2E tests
        run: npm run test:e2e
        env:
          CI: true
          JEST_E2E_MODE: 'true'
          NETWORK_AVAILABLE: ${{ env.NETWORK_AVAILABLE }}
          TARI_NETWORK: 'testnet'
        timeout-minutes: 30
        
      - name: Upload E2E test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: e2e-test-results
          path: |
            test-results/
            logs/
            coverage/

  # Performance benchmarks
  performance-tests:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    needs: unit-tests
    if: github.ref == 'refs/heads/main' || contains(github.event.pull_request.labels.*.name, 'run-benchmarks')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ env.RUST_VERSION }}
          override: true
          
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential libssl-dev pkg-config
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build native modules
        run: npm run build:native
        
      - name: Build packages
        run: npm run build
        
      - name: Run performance benchmarks
        run: npm run benchmark
        env:
          CI: true
          
      - name: Upload benchmark results
        uses: actions/upload-artifact@v4
        with:
          name: benchmark-results
          path: benchmark-results/
          
      - name: Comment benchmark results on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            
            try {
              const resultsPath = path.join('benchmark-results', 'latest.json');
              const results = JSON.parse(fs.readFileSync(resultsPath, 'utf8'));
              
              const comment = `## Performance Benchmark Results
              
              **Average Performance:** ${results.summary.averagePerformance.toFixed(2)} ops/sec
              **Fast Operations:** ${results.summary.fastOperations}/${results.summary.totalOperations}
              **Error Operations:** ${results.summary.errorOperations}
              
              ### Top 3 Performers
              ${results.results
                .sort((a, b) => b.hz - a.hz)
                .slice(0, 3)
                .map((op, i) => `${i + 1}. **${op.name}:** ${op.hz.toFixed(2)} ops/sec`)
                .join('\n')}
              
              ### Recommendations
              ${results.recommendations.slice(0, 3).map((rec, i) => `${i + 1}. ${rec}`).join('\n')}
              
              <details>
              <summary>View detailed results</summary>
              
              | Operation | Ops/sec | Mean (ms) | Samples |
              |-----------|---------|-----------|---------|
              ${results.results.map(r => 
                `| ${r.name} | ${r.hz.toFixed(2)} | ${(r.mean * 1000).toFixed(3)} | ${r.samples} |`
              ).join('\n')}
              
              </details>`;
              
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            } catch (error) {
              console.log('Could not post benchmark results:', error);
            }

  # Security and linting
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run linting
        run: npm run lint
        
      - name: Run type checking
        run: npm run type-check
        
      - name: Run security audit
        run: npm audit --audit-level moderate
        
      - name: Check for outdated dependencies
        run: npm outdated || true

  # Build verification
  build-verification:
    name: Build Verification
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
      fail-fast: false
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ env.RUST_VERSION }}
          override: true
          
      - name: Install system dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential libssl-dev pkg-config
          
      - name: Install system dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
          brew install pkg-config openssl
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build native modules
        run: npm run build:native
        
      - name: Build packages
        run: npm run build
        
      - name: Verify build outputs
        run: |
          ls -la dist/
          ls -la packages/*/dist/
          
      - name: Test built packages
        run: npm run test:build

  # Test result summary
  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, code-quality, build-verification]
    if: always()
    
    steps:
      - name: Check test results
        run: |
          echo "Unit Tests: ${{ needs.unit-tests.result }}"
          echo "Integration Tests: ${{ needs.integration-tests.result }}"
          echo "Code Quality: ${{ needs.code-quality.result }}"
          echo "Build Verification: ${{ needs.build-verification.result }}"
          
          if [[ "${{ needs.unit-tests.result }}" != "success" ]] || \
             [[ "${{ needs.integration-tests.result }}" != "success" ]] || \
             [[ "${{ needs.code-quality.result }}" != "success" ]] || \
             [[ "${{ needs.build-verification.result }}" != "success" ]]; then
            echo "❌ Some tests failed"
            exit 1
          else
            echo "✅ All tests passed"
          fi
